pipeline {
    agent { label 'openssh-server' }
    options {
        skipStagesAfterUnstable()
    }

    environment {
        serviceName = 'example'
    }

    parameters {
        string(name: 'BRANCH_NAME', description: 'Branch to build', defaultValue: 'main')
    }

    stages {
        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv(installationName: 'SonarQubeScanner') {
                    sh '''
                        cd example
                        chmod +x gradlew
                        echo ${env.SONAR_HOST_URL}
                        ./gradlew sonarqube \
                        -Dsonar.projectKey=${serviceName} \
                        -Dsonar.host.url=${env.SONAR_HOST_URL} \
                        -Dsonar.login=${env.SONAR_AUTH_TOKEN} \
                        -Dsonar.projectName=${serviceName} \
                        -Dsonar.projectVersion=${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                print 'Branch to build is ' + params.BRANCH_NAME
                echo 'Building'
                sh '''
                    cd example
                    chmod +x gradlew
                    ./gradlew build -x test
                '''
            }
        }
        stage('Test') {
            steps {
                echo 'Testing 2'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying'
            }
        }
    }
}